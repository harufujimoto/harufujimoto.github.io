---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: home
---

  [edit](https://github.com/harufujimoto/harufujimoto.github.io/edit/master/index.markdown)
  - [C++ template](https://harufujimoto.github.io/cpptemplate.html)
  - [C++メモ](https://harufujimoto.github.io/cpptips.html)
  - [細かい関数などのメモ](https://harufujimoto.github.io/other_funcs.html)
  - **数学**
    - [Modint.cpp](https://harufujimoto.github.io/modint.html)
    - [二項係数(Mod)](https://harufujimoto.github.io/modcomb.html)
    - [二項係数(Pascal)](https://harufujimoto.github.io/pascals.html)
    - TODO : 階乗・逆元テーブルO(N)前計算
    - [エラトステネスの篩/素因数分解](https://harufujimoto.github.io/sieve.html)
    - [オイラーのトーシェント関数(Euler's totient function)](https://harufujimoto.github.io/totient.html))
    - [GCD,LCA,拡張ユークリッド](https://harufujimoto.github.io/gcd.html)
    - 行列 
    - Transformation Series.
      - [高速フーリエ変換](https://harufujimoto.github.io/fft.html)
      - [高速ゼータ変換](https://harufujimoto.github.io/fzt.html)
      - [高速アダマール変換](https://harufujimoto.github.io/wht.html)
  - **グラフ**
    - テンプレート
    - 一般グラフに対するアルゴリズム
      - [ダイクストラ法(Dijkstra's algotithm)](https://harufujimoto.github.io/graph/dijkstra.html) 
      - [ベルマンフォード法（Bellman-Ford algorithm）](https://harufujimoto.github.io/bellman_ford.html)
      - [ワーシャル・フロイド法(Warshall-Floyd algorithm)](https://harufujimoto.github.io/warshall_floyd.html)
      - [トポロジカルソート(topological sorting)](https://harufujimoto.github.io/topological_sort.html)
      - [01-BFS](https://harufujimoto.github.io/01bfs.html)
      - [D'Espo-Page algorithm(CP)](https://harufujimoto.github.io/page_algo.html)
      - [最小全域木(MST)](https://harufujimoto.github.io/mst.html)
      - [強連結成分分解(SCC)](https://harufujimoto.github.io/scc.html)
      - [2-SAT](https://harufujimoto.github.io/2sat.html)
      - [LCA(最近共通祖先)](https://harufujimoto.github.io/lca.html)
    - 木(tree)
    - フロー(Flow)
      - [最大流](https://harufujimoto.github.io/maxflow.html)
      - [最小カット](https://harufujimoto.github.io/mincut.html)
      - [二部マッチング](https://harufujimoto.github.io/bipart_matching.html)
      - [一般マッチング](https://harufujimoto.github.io/general_matching.html)
      - [最小費用流](https://harufujimoto.github.io/mincostflow.html)
    - [グラフに関する問題など](https://harufujimoto.github.io/graph_problems.html)
  - **データ構造**
    - Segment Tree
      - [一般化セグメント木](https://harufujimoto.github.io/general_segtree.html)
      - [セグメント木(Range Min Query)](https://harufujimoto.github.io/rmq.html)
      - [セグメント木(Range Sum Query)](https://harufujimoto.github.io/rsq.html)
      - [遅延セグメント木(Sum Query)](https://harufujimoto.github.io/lazy_rsq.html)
      - [遅延セグメント木(Min Query)](https://harufujimoto.github.io/lazy_rmq.html)
    - Binary Indexed Tree
    - [UnionFind](https://harufujimoto.github.io/datastructure/unionfind.html)
    - 平方分割
    - Treap
    - Sqrt Tree
    - Deleting from a data structure in O(T(n)logN) (CP-algo)
  - **文字列**
    - [Z-algorithm](https://harufujimoto.github.io/zalgo.html)
    - [Rolling Hash](https://harufujimoto.github.io/rollinghash.html)
    - [Suffix Array](https://harufujimoto.github.io/suffixarray.html)
    - Aho-Corasick algorithm (CPalgo)
    - [Manacher's Algorithm](https://harufujimoto.github.io/manacher.html)
    - [kmp algorithm](https://harufujimoto.github.io/kmp.html)
    - [Trie](https://harufujimoto.github.io/trie.html)
